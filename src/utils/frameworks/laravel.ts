import type { Framework } from '@/utils/frameworks/type.ts'
import { toPascalCase } from '@/utils/utils.ts'

export const laravel: Framework[] = [
  {
    id: 'php artisan',
    name: 'Laravel',
    icon: '🚀',
    categories: {
      scaffold: {
        id: 'scaffold',
        name: 'Scaffold',
        icon: '🏗️',
        options: {
          'make:cast': {
            id: 'make:cast',
            name: 'Make Cast',
            textInput: { label: 'Cast Name', placeholder: 'YourCast' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--inbound', multiSelect: true },
              { name: '--force', multiSelect: true },
            ],
          },
          'make:channel': {
            id: 'make:channel',
            name: 'Make Channel',
            textInput: { label: 'Channel Name', placeholder: 'YourChannel' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [{ name: '--force', multiSelect: true }],
          },
          'make:command': {
            id: 'make:command',
            name: 'Make Command',
            textInput: { label: 'Command Name', placeholder: 'YourCommand' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--command',
                textInput: { label: 'Signature', placeholder: 'your:command' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:component': {
            id: 'make:component',
            name: 'Make Component',
            textInput: { label: 'Component Name', placeholder: 'YourComponent' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--force', multiSelect: true },
              { name: '--inline', multiSelect: true },
              { name: '--view', multiSelect: true },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:controller': {
            id: 'make:controller',
            name: 'Make Controller',
            textInput: { label: 'Controller Name', placeholder: 'YourController' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--api', multiSelect: true },
              { name: '--type', multiSelect: true },
              { name: '--force', multiSelect: true },
              {
                name: '--model',
                textInput: { label: 'Model', placeholder: 'User' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--parent',
                textInput: { label: 'Parent Controller', placeholder: 'AdminController' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--resource', multiSelect: true },
              { name: '--requests', multiSelect: true },
              { name: '--singleton', multiSelect: true },
              { name: '--creatable', multiSelect: true },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:event': {
            id: 'make:event',
            name: 'Make Event',
            textInput: { label: 'Event Name', placeholder: 'YourEvent' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [{ name: '--force', multiSelect: true }],
          },
          'make:exception': {
            id: 'make:exception',
            name: 'Make Exception',
            textInput: { label: 'Exception Name', placeholder: 'YourException' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--render', multiSelect: true },
              { name: '--report', multiSelect: true },
              { name: '--force', multiSelect: true },
            ],
          },
          'make:factory': {
            id: 'make:factory',
            name: 'Make Factory',
            textInput: { label: 'Factory Name', placeholder: 'YourFactory' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--model',
                textInput: { label: 'Model', placeholder: 'User' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
            ],
          },
          'make:job': {
            id: 'make:job',
            name: 'Make Job',
            textInput: { label: 'Job Name', placeholder: 'YourJob' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--sync', multiSelect: true },
              { name: '--force', multiSelect: true },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:listener': {
            id: 'make:listener',
            name: 'Make Listener',
            textInput: { label: 'Listener Name', placeholder: 'YourListener' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--event',
                textInput: { label: 'Event', placeholder: 'UserRegistered' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--queued', multiSelect: true },
              { name: '--force', multiSelect: true },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:mail': {
            id: 'make:mail',
            name: 'Make Mail',
            textInput: { label: 'Mail Name', placeholder: 'YourMail' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--force', multiSelect: true },
              {
                name: '--markdown',
                textInput: { label: 'Markdown Template', placeholder: 'emails.template' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:middleware': {
            id: 'make:middleware',
            name: 'Make Middleware',
            textInput: { label: 'Middleware Name', placeholder: 'YourMiddleware' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--force', multiSelect: true },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:migration': {
            id: 'make:migration',
            name: 'Make Migration',
            textInput: { label: 'Migration Name', placeholder: 'create_users_table' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--create',
                textInput: { label: 'Table', placeholder: 'users' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--table',
                textInput: { label: 'Table', placeholder: 'users' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: './database/migrations' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--realpath', multiSelect: true },
              { name: '--fullpath', multiSelect: true },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:model': {
            id: 'make:model',
            name: 'Make Model',
            textInput: { label: 'Model Name', placeholder: 'User' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '-a, --all', multiSelect: true },
              { name: '-c, --controller', multiSelect: true },
              { name: '-f, --factory', multiSelect: true },
              { name: '-m, --migration', multiSelect: true },
              { name: '-s, --seed', multiSelect: true },
              { name: '-p, --pivot', multiSelect: true },
              { name: '-r, --resource', multiSelect: true },
              { name: '--api', multiSelect: true },
              { name: '--force', multiSelect: true },
              { name: '--test', multiSelect: true },
              { name: '--requests', multiSelect: true },
              { name: '--policy', multiSelect: true },
            ],
          },
          'make:notification': {
            id: 'make:notification',
            name: 'Make Notification',
            textInput: { label: 'Notification Name', placeholder: 'YourNotification' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--force', multiSelect: true },
              {
                name: '--markdown',
                textInput: { label: 'Markdown Template', placeholder: 'notifications.template' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--test', multiSelect: true },
            ],
          },
          'make:observer': {
            id: 'make:observer',
            name: 'Make Observer',
            textInput: { label: 'Observer Name', placeholder: 'YourObserver' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--model',
                textInput: { label: 'Model', placeholder: 'User' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
            ],
          },
          'make:policy': {
            id: 'make:policy',
            name: 'Make Policy',
            textInput: { label: 'Policy Name', placeholder: 'YourPolicy' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--model',
                textInput: { label: 'Model', placeholder: 'User' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--guard',
                textInput: { label: 'Guard', placeholder: 'web' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
            ],
          },
          'make:provider': {
            id: 'make:provider',
            name: 'Make Provider',
            textInput: { label: 'Provider Name', placeholder: 'YourServiceProvider' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [{ name: '--force', multiSelect: true }],
          },
          'make:request': {
            id: 'make:request',
            name: 'Make Request',
            textInput: { label: 'Request Name', placeholder: 'YourRequest' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [{ name: '--force', multiSelect: true }],
          },
          'make:resource': {
            id: 'make:resource',
            name: 'Make Resource',
            textInput: { label: 'Resource Name', placeholder: 'YourResource' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--collection', multiSelect: true },
              { name: '--force', multiSelect: true },
            ],
          },
          'make:rule': {
            id: 'make:rule',
            name: 'Make Rule',
            textInput: { label: 'Rule Name', placeholder: 'YourRule' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--implicit', multiSelect: true },
              { name: '--force', multiSelect: true },
            ],
          },
          'make:seeder': {
            id: 'make:seeder',
            name: 'Make Seeder',
            textInput: { label: 'Seeder Name', placeholder: 'YourSeeder' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [{ name: '--force', multiSelect: true }],
          },
          'make:test': {
            id: 'make:test',
            name: 'Make Test',
            textInput: { label: 'Test Name', placeholder: 'YourTest' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              { name: '--unit', multiSelect: true },
              { name: '--pest', multiSelect: true },
              { name: '--force', multiSelect: true },
            ],
          },
        },
      },
      database: {
        id: 'database',
        name: 'Database',
        icon: '🗄️',
        options: {
          'db:monitor': {
            id: 'db:monitor',
            name: 'DB Monitor',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--max',
                textInput: { label: 'Max Connections', placeholder: '10' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--interval',
                textInput: { label: 'Interval (seconds)', placeholder: '5' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          'db:seed': {
            id: 'db:seed',
            name: 'DB Seed',
            templates: [
              {
                name: '--class',
                textInput: { label: 'Seeder Class', placeholder: 'DatabaseSeeder' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
            ],
          },
          'db:show': {
            id: 'db:show',
            name: 'DB Show',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--json', multiSelect: true },
            ],
          },
          'db:table': {
            id: 'db:table',
            name: 'DB Table',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--json', multiSelect: true },
            ],
          },
          'db:wipe': {
            id: 'db:wipe',
            name: 'DB Wipe',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--drop-views', multiSelect: true },
              { name: '--drop-types', multiSelect: true },
              { name: '--force', multiSelect: true },
            ],
          },
        },
      },
      migrate: {
        id: 'migrate',
        name: 'Migrate',
        icon: '🚚',
        options: {
          migrate: {
            id: 'migrate',
            name: 'Migrate',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: './database/migrations' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--realpath', multiSelect: true },
              {
                name: '--schema-path',
                textInput: { label: 'Schema Path', placeholder: './schema.sql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--pretend', multiSelect: true },
              { name: '--seed', multiSelect: true },
              { name: '--step', multiSelect: true },
            ],
          },
          'migrate:fresh': {
            id: 'migrate:fresh',
            name: 'Migrate Fresh',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--drop-views', multiSelect: true },
              { name: '--drop-types', multiSelect: true },
              { name: '--force', multiSelect: true },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: './database/migrations' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--realpath', multiSelect: true },
              {
                name: '--schema-path',
                textInput: { label: 'Schema Path', placeholder: './schema.sql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--seed', multiSelect: true },
              {
                name: '--seeder',
                textInput: { label: 'Seeder Class', placeholder: 'DatabaseSeeder' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--step', multiSelect: true },
            ],
          },
          'migrate:install': {
            id: 'migrate:install',
            name: 'Migrate Install',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          'migrate:refresh': {
            id: 'migrate:refresh',
            name: 'Migrate Refresh',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: './database/migrations' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--realpath', multiSelect: true },
              { name: '--seed', multiSelect: true },
              {
                name: '--seeder',
                textInput: { label: 'Seeder Class', placeholder: 'DatabaseSeeder' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--step',
                textInput: { label: 'Number of Steps', placeholder: '1' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          'migrate:reset': {
            id: 'migrate:reset',
            name: 'Migrate Reset',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: './database/migrations' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--realpath', multiSelect: true },
            ],
          },
          'migrate:rollback': {
            id: 'migrate:rollback',
            name: 'Migrate Rollback',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: './database/migrations' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--realpath', multiSelect: true },
              {
                name: '--step',
                textInput: { label: 'Number of Steps', placeholder: '1' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--batch',
                textInput: { label: 'Batch Number', placeholder: '1' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          'migrate:status': {
            id: 'migrate:status',
            name: 'Migrate Status',
            templates: [
              {
                name: '--database',
                textInput: { label: 'Database Connection', placeholder: 'mysql' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: './database/migrations' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--realpath', multiSelect: true },
            ],
          },
        },
      },
      queue: {
        id: 'queue',
        name: 'Queue',
        icon: '📋',
        options: {
          'queue:clear': {
            id: 'queue:clear',
            name: 'Queue Clear',
            templates: [
              {
                name: '--queue',
                textInput: { label: 'Queue Name', placeholder: 'default' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
            ],
          },
          'queue:failed': {
            id: 'queue:failed',
            name: 'Queue Failed',
            templates: [
              {
                name: '--after',
                textInput: { label: 'After Datetime', placeholder: '2021-01-01 00:00:00' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--before',
                textInput: { label: 'Before Datetime', placeholder: '2021-12-31 23:59:59' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--queue',
                textInput: { label: 'Queue Name', placeholder: 'default' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--json', multiSelect: true },
            ],
          },
          'queue:flush': {
            id: 'queue:flush',
            name: 'Queue Flush',
            templates: [],
          },
          'queue:forget': {
            id: 'queue:forget',
            name: 'Queue Forget',
            textInput: { label: 'Failed Job ID', placeholder: '1' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [],
          },
          'queue:listen': {
            id: 'queue:listen',
            name: 'Queue Listen',
            templates: [
              {
                name: '--name',
                textInput: { label: 'Worker Name', placeholder: 'worker-1' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--queue',
                textInput: { label: 'Queue Name', placeholder: 'default' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--delay',
                textInput: { label: 'Delay (seconds)', placeholder: '0' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
              {
                name: '--memory',
                textInput: { label: 'Memory Limit (MB)', placeholder: '128' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--sleep',
                textInput: { label: 'Sleep (seconds)', placeholder: '3' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--timeout',
                textInput: { label: 'Timeout (seconds)', placeholder: '60' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--tries',
                textInput: { label: 'Tries', placeholder: '3' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          'queue:restart': {
            id: 'queue:restart',
            name: 'Queue Restart',
            templates: [],
          },
          'queue:retry': {
            id: 'queue:retry',
            name: 'Queue Retry',
            textInput: { label: 'Job ID or "all"', placeholder: '1 or all' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--queue',
                textInput: { label: 'Queue Name', placeholder: 'default' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--range',
                textInput: { label: 'Job ID Range', placeholder: '1-5' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          'queue:work': {
            id: 'queue:work',
            name: 'Queue Work',
            templates: [
              {
                name: '--name',
                textInput: { label: 'Worker Name', placeholder: 'worker-1' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--queue',
                textInput: { label: 'Queue Name', placeholder: 'default' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--daemon', multiSelect: true },
              {
                name: '--delay',
                textInput: { label: 'Delay (seconds)', placeholder: '0' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--force', multiSelect: true },
              {
                name: '--memory',
                textInput: { label: 'Memory Limit (MB)', placeholder: '128' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--sleep',
                textInput: { label: 'Sleep (seconds)', placeholder: '3' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--timeout',
                textInput: { label: 'Timeout (seconds)', placeholder: '60' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--tries',
                textInput: { label: 'Tries', placeholder: '3' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--max-jobs',
                textInput: { label: 'Max Jobs', placeholder: '0' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--max-time',
                textInput: { label: 'Max Time (seconds)', placeholder: '0' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--rest',
                textInput: { label: 'Rest Between Jobs (seconds)', placeholder: '0' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--stop-when-empty', multiSelect: true },
            ],
          },
        },
      },
      route: {
        id: 'route',
        name: 'Route',
        icon: '🛣️',
        options: {
          'route:cache': {
            id: 'route:cache',
            name: 'Route Cache',
            templates: [],
          },
          'route:clear': {
            id: 'route:clear',
            name: 'Route Clear',
            templates: [],
          },
          'route:list': {
            id: 'route:list',
            name: 'Route List',
            templates: [
              { name: '--json', multiSelect: true },
              {
                name: '--method',
                textInput: { label: 'Method', placeholder: 'GET' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--name',
                textInput: { label: 'Name', placeholder: 'home' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--path',
                textInput: { label: 'Path', placeholder: '/home' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--except-vendor', multiSelect: true },
              { name: '--only-vendor', multiSelect: true },
            ],
          },
        },
      },
      schedule: {
        id: 'schedule',
        name: 'Schedule',
        icon: '⏰',
        options: {
          'schedule:list': {
            id: 'schedule:list',
            name: 'Schedule List',
            templates: [],
          },
          'schedule:run': {
            id: 'schedule:run',
            name: 'Schedule Run',
            templates: [],
          },
          'schedule:test': {
            id: 'schedule:test',
            name: 'Schedule Test',
            textInput: { label: 'Command', placeholder: 'your:command' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [],
          },
        },
      },
      general: {
        id: 'general',
        name: 'General',
        icon: '⚙️',
        options: {
          'clear-compiled': {
            id: 'clear-compiled',
            name: 'Clear Compiled',
            templates: [],
          },
          completion: {
            id: 'completion',
            name: 'Completion',
            templates: [
              {
                name: '--shell',
                textInput: { label: 'Shell Type', placeholder: 'bash|zsh|fish' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          down: {
            id: 'down',
            name: 'Down',
            templates: [
              {
                name: '--message',
                textInput: { label: 'Maintenance Message', placeholder: 'Site is down' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--retry',
                textInput: { label: 'Retry After (seconds)', placeholder: '60' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--refresh',
                textInput: { label: 'Refresh After (seconds)', placeholder: '60' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--secret',
                textInput: { label: 'Secret Token', placeholder: 'secret-token' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--status',
                textInput: { label: 'HTTP Status Code', placeholder: '503' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--redirect',
                textInput: { label: 'Redirect URL', placeholder: '/' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          env: {
            id: 'env',
            name: 'Environment',
            templates: [],
          },
          help: {
            id: 'help',
            name: 'Help',
            textInput: { label: 'Command Name', placeholder: 'make:model' },
            inputTransformer: (input: string) => toPascalCase(input),
            templates: [
              {
                name: '--format',
                textInput: { label: 'Format', placeholder: 'txt|xml|json|md' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--raw', multiSelect: true },
            ],
          },
          'key:generate': {
            id: 'key:generate',
            name: 'Key Generate',
            templates: [
              { name: '--show', multiSelect: true },
              { name: '--force', multiSelect: true },
            ],
          },
          optimize: {
            id: 'optimize',
            name: 'Optimize',
            templates: [{ name: '--force', multiSelect: true }],
          },
          'optimize:clear': {
            id: 'optimize:clear',
            name: 'Optimize Clear',
            templates: [],
          },
          'package:discover': {
            id: 'package:discover',
            name: 'Package Discover',
            templates: [],
          },
          serve: {
            id: 'serve',
            name: 'Serve',
            templates: [
              {
                name: '--host',
                textInput: { label: 'Host', placeholder: '127.0.0.1' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--port',
                textInput: { label: 'Port', placeholder: '8000' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--tries',
                textInput: { label: 'Tries', placeholder: '5' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              { name: '--no-reload', multiSelect: true },
            ],
          },
          'storage:link': {
            id: 'storage:link',
            name: 'Storage Link',
            templates: [
              { name: '--force', multiSelect: true },
              { name: '--relative', multiSelect: true },
            ],
          },
          'vendor:publish': {
            id: 'vendor:publish',
            name: 'Vendor Publish',
            templates: [
              { name: '--force', multiSelect: true },
              { name: '--all', multiSelect: true },
              {
                name: '--provider',
                textInput: { label: 'Provider', placeholder: 'App\\Providers\\AppServiceProvider' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
              {
                name: '--tag',
                textInput: { label: 'Tag', placeholder: 'config' },
                inputTransformer: (input: string) => toPascalCase(input),
                multiSelect: true,
              },
            ],
          },
          'view:cache': {
            id: 'view:cache',
            name: 'View Cache',
            templates: [],
          },
          'view:clear': {
            id: 'view:clear',
            name: 'View Clear',
            templates: [],
          },
        },
      },
    },
  },
]
